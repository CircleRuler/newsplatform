{"version":3,"sources":["meteor://ðŸ’»app/packages/json/packages/json.js"],"names":[],"mappingsuH","file":"/packages/json.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/json/json_native.js                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Do we already have a global JSON object? Export it as our JSON object.                                 // 1\nif (window.JSON)                                                                                          // 2\n  JSON = window.JSON;                                                                                     // 3\n                                                                                                          // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/json/json2.js                                                                                 //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/*                                                                                                        // 1\n    json2.js                                                                                              // 2\n    2012-10-08                                                                                            // 3\n                                                                                                          // 4\n    Public Domain.                                                                                        // 5\n                                                                                                          // 6\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                               // 7\n                                                                                                          // 8\n    See http://www.JSON.org/js.html                                                                       // 9\n                                                                                                          // 10\n                                                                                                          // 11\n    This code should be minified before deployment.                                                       // 12\n    See http://javascript.crockford.com/jsmin.html                                                        // 13\n                                                                                                          // 14\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO                            // 15\n    NOT CONTROL.                                                                                          // 16\n                                                                                                          // 17\n                                                                                                          // 18\n    This file creates a global JSON object containing two methods: stringify                              // 19\n    and parse.                                                                                            // 20\n                                                                                                          // 21\n        JSON.stringify(value, replacer, space)                                                            // 22\n            value       any JavaScript value, usually an object or array.                                 // 23\n                                                                                                          // 24\n            replacer    an optional parameter that determines how object                                  // 25\n                        values are stringified for objects. It can be a                                   // 26\n                        function or an array of strings.                                                  // 27\n                                                                                                          // 28\n            space       an optional parameter that specifies the indentation                              // 29\n                        of nested structures. If it is omitted, the text will                             // 30\n                        be packed without extra whitespace. If it is a number,                            // 31\n                        it will specify the number of spaces to indent at each                            // 32\n                        level. If it is a string (such as '\\t' or '&nbsp;'),                              // 33\n                        it contains the characters used to indent at each level.                          // 34\n                                                                                                          // 35\n            This method produces a JSON text from a JavaScript value.                                     // 36\n                                                                                                          // 37\n            When an object value is found, if the object contains a toJSON                                // 38\n            method, its toJSON method will be called and the result will be                               // 39\n            stringified. A toJSON method does not serialize: it returns the                               // 40\n            value represented by the name/value pair that should be serialized,                           // 41\n            or undefined if nothing should be serialized. The toJSON method                               // 42\n            will be passed the key associated with the value, and this will be                            // 43\n            bound to the value                                                                            // 44\n                                                                                                          // 45\n            For example, this would serialize Dates as ISO strings.                                       // 46\n                                                                                                          // 47\n                Date.prototype.toJSON = function (key) {                                                  // 48\n                    function f(n) {                                                                       // 49\n                        // Format integers to have at least two digits.                                   // 50\n                        return n < 10 ? '0' + n : n;                                                      // 51\n                    }                                                                                     // 52\n                                                                                                          // 53\n                    return this.getUTCFullYear()   + '-' +                                                // 54\n                         f(this.getUTCMonth() + 1) + '-' +                                                // 55\n                         f(this.getUTCDate())      + 'T' +                                                // 56\n                         f(this.getUTCHours())     + ':' +                                                // 57\n                         f(this.getUTCMinutes())   + ':' +                                                // 58\n                         f(this.getUTCSeconds())   + 'Z';                                                 // 59\n                };                                                                                        // 60\n                                                                                                          // 61\n            You can provide an optional replacer method. It will be passed the                            // 62\n            key and value of each member, with this bound to the containing                               // 63\n            object. The value that is returned from your method will be                                   // 64\n            serialized. If your method returns undefined, then the member will                            // 65\n            be excluded from the serialization.                                                           // 66\n                                                                                                          // 67\n            If the replacer parameter is an array of strings, then it will be                             // 68\n            used to select the members to be serialized. It filters the results                           // 69\n            such that only members with keys listed in the replacer array are                             // 70\n            stringified.                                                                                  // 71\n                                                                                                          // 72\n            Values that do not have JSON representations, such as undefined or                            // 73\n            functions, will not be serialized. Such values in objects will be                             // 74\n            dropped; in arrays they will be replaced with null. You can use                               // 75\n            a replacer function to replace those with JSON values.                                        // 76\n            JSON.stringify(undefined) returns undefined.                                                  // 77\n                                                                                                          // 78\n            The optional space parameter produces a stringification of the                                // 79\n            value that is filled with line breaks and indentation to make it                              // 80\n            easier to read.                                                                               // 81\n                                                                                                          // 82\n            If the space parameter is a non-empty string, then that string will                           // 83\n            be used for indentation. If the space parameter is a number, then                             // 84\n            the indentation will be that many spaces.                                                     // 85\n                                                                                                          // 86\n            Example:                                                                                      // 87\n                                                                                                          // 88\n            text = JSON.stringify(['e', {pluribus: 'unum'}]);                                             // 89\n            // text is '[\"e\",{\"pluribus\":\"unum\"}]'                                                        // 90\n                                                                                                          // 91\n                                                                                                          // 92\n            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');                                 // 93\n            // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'                                   // 94\n                                                                                                          // 95\n            text = JSON.stringify([new Date()], function (key, value) {                                   // 96\n                return this[key] instanceof Date ?                                                        // 97\n                    'Date(' + this[key] + ')' : value;                                                    // 98\n            });                                                                                           // 99\n            // text is '[\"Date(---current time---)\"]'                                                     // 100\n                                                                                                          // 101\n                                                                                                          // 102\n        JSON.parse(text, reviver)                                                                         // 103\n            This method parses a JSON text to produce an object or array.                                 // 104\n            It can throw a SyntaxError exception.                                                         // 105\n                                                                                                          // 106\n            The optional reviver parameter is a function that can filter and                              // 107\n            transform the results. It receives each of the keys and values,                               // 108\n            and its return value is used instead of the original value.                                   // 109\n            If it returns what it received, then the structure is not modified.                           // 110\n            If it returns undefined then the member is deleted.                                           // 111\n                                                                                                          // 112\n            Example:                                                                                      // 113\n                                                                                                          // 114\n            // Parse the text. Values that look like ISO date strings will                                // 115\n            // be converted to Date objects.                                                              // 116\n                                                                                                          // 117\n            myData = JSON.parse(text, function (key, value) {                                             // 118\n                var a;                                                                                    // 119\n                if (typeof value === 'string') {                                                          // 120\n                    a =                                                                                   // 121\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);                               // 122\n                    if (a) {                                                                              // 123\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],                          // 124\n                            +a[5], +a[6]));                                                               // 125\n                    }                                                                                     // 126\n                }                                                                                         // 127\n                return value;                                                                             // 128\n            });                                                                                           // 129\n                                                                                                          // 130\n            myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {                           // 131\n                var d;                                                                                    // 132\n                if (typeof value === 'string' &&                                                          // 133\n                        value.slice(0, 5) === 'Date(' &&                                                  // 134\n                        value.slice(-1) === ')') {                                                        // 135\n                    d = new Date(value.slice(5, -1));                                                     // 136\n                    if (d) {                                                                              // 137\n                        return d;                                                                         // 138\n                    }                                                                                     // 139\n                }                                                                                         // 140\n                return value;                                                                             // 141\n            });                                                                                           // 142\n                                                                                                          // 143\n                                                                                                          // 144\n    This is a reference implementation. You are free to copy, modify, or                                  // 145\n    redistribute.                                                                                         // 146\n*/                                                                                                        // 147\n                                                                                                          // 148\n/*jslint evil: true, regexp: true */                                                                      // 149\n                                                                                                          // 150\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,                                      // 151\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,                                            // 152\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,                                      // 153\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,                                 // 154\n    test, toJSON, toString, valueOf                                                                       // 155\n*/                                                                                                        // 156\n                                                                                                          // 157\n                                                                                                          // 158\n// Create a JSON object only if one does not already exist. We create the                                 // 159\n// methods in a closure to avoid creating global variables.                                               // 160\n                                                                                                          // 161\nif (typeof JSON !== 'object') {                                                                           // 162\n    JSON = {};                                                                                            // 163\n}                                                                                                         // 164\n                                                                                                          // 165\n(function () {                                                                                            // 166\n    'use strict';                                                                                         // 167\n                                                                                                          // 168\n    function f(n) {                                                                                       // 169\n        // Format integers to have at least two digits.                                                   // 170\n        return n < 10 ? '0' + n : n;                                                                      // 171\n    }                                                                                                     // 172\n                                                                                                          // 173\n    if (typeof Date.prototype.toJSON !== 'function') {                                                    // 174\n                                                                                                          // 175\n        Date.prototype.toJSON = function (key) {                                                          // 176\n                                                                                                          // 177\n            return isFinite(this.valueOf())                                                               // 178\n                ? this.getUTCFullYear()     + '-' +                                                       // 179\n                    f(this.getUTCMonth() + 1) + '-' +                                                     // 180\n                    f(this.getUTCDate())      + 'T' +                                                     // 181\n                    f(this.getUTCHours())     + ':' +                                                     // 182\n                    f(this.getUTCMinutes())   + ':' +                                                     // 183\n                    f(this.getUTCSeconds())   + 'Z'                                                       // 184\n                : null;                                                                                   // 185\n        };                                                                                                // 186\n                                                                                                          // 187\n        String.prototype.toJSON      =                                                                    // 188\n            Number.prototype.toJSON  =                                                                    // 189\n            Boolean.prototype.toJSON = function (key) {                                                   // 190\n                return this.valueOf();                                                                    // 191\n            };                                                                                            // 192\n    }                                                                                                     // 193\n                                                                                                          // 194\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        gap,                                                                                              // 197\n        indent,                                                                                           // 198\n        meta = {    // table of character substitutions                                                   // 199\n            '\\b': '\\\\b',                                                                                  // 200\n            '\\t': '\\\\t',                                                                                  // 201\n            '\\n': '\\\\n',                                                                                  // 202\n            '\\f': '\\\\f',                                                                                  // 203\n            '\\r': '\\\\r',                                                                                  // 204\n            '\"' : '\\\\\"',                                                                                  // 205\n            '\\\\': '\\\\\\\\'                                                                                  // 206\n        },                                                                                                // 207\n        rep;                                                                                              // 208\n                                                                                                          // 209\n                                                                                                          // 210\n    function quote(string) {                                                                              // 211\n                                                                                                          // 212\n// If the string contains no control characters, no quote characters, and no                              // 213\n// backslash characters, then we can safely slap some quotes around it.                                   // 214\n// Otherwise we must also replace the offending characters with safe escape                               // 215\n// sequences.                                                                                             // 216\n                                                                                                          // 217\n        escapable.lastIndex = 0;                                                                          // 218\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {                    // 219\n            var c = meta[a];                                                                              // 220\n            return typeof c === 'string'                                                                  // 221\n                ? c                                                                                       // 222\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                              // 223\n        }) + '\"' : '\"' + string + '\"';                                                                    // 224\n    }                                                                                                     // 225\n                                                                                                          // 226\n                                                                                                          // 227\n    function str(key, holder) {                                                                           // 228\n                                                                                                          // 229\n// Produce a string from holder[key].                                                                     // 230\n                                                                                                          // 231\n        var i,          // The loop counter.                                                              // 232\n            k,          // The member key.                                                                // 233\n            v,          // The member value.                                                              // 234\n            length,                                                                                       // 235\n            mind = gap,                                                                                   // 236\n            partial,                                                                                      // 237\n            value = holder[key];                                                                          // 238\n                                                                                                          // 239\n// If the value has a toJSON method, call it to obtain a replacement value.                               // 240\n                                                                                                          // 241\n        if (value && typeof value === 'object' &&                                                         // 242\n                typeof value.toJSON === 'function') {                                                     // 243\n            value = value.toJSON(key);                                                                    // 244\n        }                                                                                                 // 245\n                                                                                                          // 246\n// If we were called with a replacer function, then call the replacer to                                  // 247\n// obtain a replacement value.                                                                            // 248\n                                                                                                          // 249\n        if (typeof rep === 'function') {                                                                  // 250\n            value = rep.call(holder, key, value);                                                         // 251\n        }                                                                                                 // 252\n                                                                                                          // 253\n// What happens next depends on the value's type.                                                         // 254\n                                                                                                          // 255\n        switch (typeof value) {                                                                           // 256\n        case 'string':                                                                                    // 257\n            return quote(value);                                                                          // 258\n                                                                                                          // 259\n        case 'number':                                                                                    // 260\n                                                                                                          // 261\n// JSON numbers must be finite. Encode non-finite numbers as null.                                        // 262\n                                                                                                          // 263\n            return isFinite(value) ? String(value) : 'null';                                              // 264\n                                                                                                          // 265\n        case 'boolean':                                                                                   // 266\n        case 'null':                                                                                      // 267\n                                                                                                          // 268\n// If the value is a boolean or null, convert it to a string. Note:                                       // 269\n// typeof null does not produce 'null'. The case is included here in                                      // 270\n// the remote chance that this gets fixed someday.                                                        // 271\n                                                                                                          // 272\n            return String(value);                                                                         // 273\n                                                                                                          // 274\n// If the type is 'object', we might be dealing with an object or an array or                             // 275\n// null.                                                                                                  // 276\n                                                                                                          // 277\n        case 'object':                                                                                    // 278\n                                                                                                          // 279\n// Due to a specification blunder in ECMAScript, typeof null is 'object',                                 // 280\n// so watch out for that case.                                                                            // 281\n                                                                                                          // 282\n            if (!value) {                                                                                 // 283\n                return 'null';                                                                            // 284\n            }                                                                                             // 285\n                                                                                                          // 286\n// Make an array to hold the partial results of stringifying this object value.                           // 287\n                                                                                                          // 288\n            gap += indent;                                                                                // 289\n            partial = [];                                                                                 // 290\n                                                                                                          // 291\n// Is the value an array?                                                                                 // 292\n                                                                                                          // 293\n            if (Object.prototype.toString.apply(value) === '[object Array]') {                            // 294\n                                                                                                          // 295\n// The value is an array. Stringify every element. Use null as a placeholder                              // 296\n// for non-JSON values.                                                                                   // 297\n                                                                                                          // 298\n                length = value.length;                                                                    // 299\n                for (i = 0; i < length; i += 1) {                                                         // 300\n                    partial[i] = str(i, value) || 'null';                                                 // 301\n                }                                                                                         // 302\n                                                                                                          // 303\n// Join all of the elements together, separated with commas, and wrap them in                             // 304\n// brackets.                                                                                              // 305\n                                                                                                          // 306\n                v = partial.length === 0                                                                  // 307\n                    ? '[]'                                                                                // 308\n                    : gap                                                                                 // 309\n                    ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'                         // 310\n                    : '[' + partial.join(',') + ']';                                                      // 311\n                gap = mind;                                                                               // 312\n                return v;                                                                                 // 313\n            }                                                                                             // 314\n                                                                                                          // 315\n// If the replacer is an array, use it to select the members to be stringified.                           // 316\n                                                                                                          // 317\n            if (rep && typeof rep === 'object') {                                                         // 318\n                length = rep.length;                                                                      // 319\n                for (i = 0; i < length; i += 1) {                                                         // 320\n                    if (typeof rep[i] === 'string') {                                                     // 321\n                        k = rep[i];                                                                       // 322\n                        v = str(k, value);                                                                // 323\n                        if (v) {                                                                          // 324\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                              // 325\n                        }                                                                                 // 326\n                    }                                                                                     // 327\n                }                                                                                         // 328\n            } else {                                                                                      // 329\n                                                                                                          // 330\n// Otherwise, iterate through all of the keys in the object.                                              // 331\n                                                                                                          // 332\n                for (k in value) {                                                                        // 333\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {                                 // 334\n                        v = str(k, value);                                                                // 335\n                        if (v) {                                                                          // 336\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                              // 337\n                        }                                                                                 // 338\n                    }                                                                                     // 339\n                }                                                                                         // 340\n            }                                                                                             // 341\n                                                                                                          // 342\n// Join all of the member texts together, separated with commas,                                          // 343\n// and wrap them in braces.                                                                               // 344\n                                                                                                          // 345\n            v = partial.length === 0                                                                      // 346\n                ? '{}'                                                                                    // 347\n                : gap                                                                                     // 348\n                ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'                             // 349\n                : '{' + partial.join(',') + '}';                                                          // 350\n            gap = mind;                                                                                   // 351\n            return v;                                                                                     // 352\n        }                                                                                                 // 353\n    }                                                                                                     // 354\n                                                                                                          // 355\n// If the JSON object does not yet have a stringify method, give it one.                                  // 356\n                                                                                                          // 357\n    if (typeof JSON.stringify !== 'function') {                                                           // 358\n        JSON.stringify = function (value, replacer, space) {                                              // 359\n                                                                                                          // 360\n// The stringify method takes a value and an optional replacer, and an optional                           // 361\n// space parameter, and returns a JSON text. The replacer can be a function                               // 362\n// that can replace values, or an array of strings that will select the keys.                             // 363\n// A default replacer method can be provided. Use of the space parameter can                              // 364\n// produce text that is more easily readable.                                                             // 365\n                                                                                                          // 366\n            var i;                                                                                        // 367\n            gap = '';                                                                                     // 368\n            indent = '';                                                                                  // 369\n                                                                                                          // 370\n// If the space parameter is a number, make an indent string containing that                              // 371\n// many spaces.                                                                                           // 372\n                                                                                                          // 373\n            if (typeof space === 'number') {                                                              // 374\n                for (i = 0; i < space; i += 1) {                                                          // 375\n                    indent += ' ';                                                                        // 376\n                }                                                                                         // 377\n                                                                                                          // 378\n// If the space parameter is a string, it will be used as the indent string.                              // 379\n                                                                                                          // 380\n            } else if (typeof space === 'string') {                                                       // 381\n                indent = space;                                                                           // 382\n            }                                                                                             // 383\n                                                                                                          // 384\n// If there is a replacer, it must be a function or an array.                                             // 385\n// Otherwise, throw an error.                                                                             // 386\n                                                                                                          // 387\n            rep = replacer;                                                                               // 388\n            if (replacer && typeof replacer !== 'function' &&                                             // 389\n                    (typeof replacer !== 'object' ||                                                      // 390\n                    typeof replacer.length !== 'number')) {                                               // 391\n                throw new Error('JSON.stringify');                                                        // 392\n            }                                                                                             // 393\n                                                                                                          // 394\n// Make a fake root object containing our value under the key of ''.                                      // 395\n// Return the result of stringifying the value.                                                           // 396\n                                                                                                          // 397\n            return str('', {'': value});                                                                  // 398\n        };                                                                                                // 399\n    }                                                                                                     // 400\n                                                                                                          // 401\n                                                                                                          // 402\n// If the JSON object does not yet have a parse method, give it one.                                      // 403\n                                                                                                          // 404\n    if (typeof JSON.parse !== 'function') {                                                               // 405\n        JSON.parse = function (text, reviver) {                                                           // 406\n                                                                                                          // 407\n// The parse method takes a text and an optional reviver function, and returns                            // 408\n// a JavaScript value if the text is a valid JSON text.                                                   // 409\n                                                                                                          // 410\n            var j;                                                                                        // 411\n                                                                                                          // 412\n            function walk(holder, key) {                                                                  // 413\n                                                                                                          // 414\n// The walk method is used to recursively walk the resulting structure so                                 // 415\n// that modifications can be made.                                                                        // 416\n                                                                                                          // 417\n                var k, v, value = holder[key];                                                            // 418\n                if (value && typeof value === 'object') {                                                 // 419\n                    for (k in value) {                                                                    // 420\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {                             // 421\n                            v = walk(value, k);                                                           // 422\n                            if (v !== undefined) {                                                        // 423\n                                value[k] = v;                                                             // 424\n                            } else {                                                                      // 425\n                                delete value[k];                                                          // 426\n                            }                                                                             // 427\n                        }                                                                                 // 428\n                    }                                                                                     // 429\n                }                                                                                         // 430\n                return reviver.call(holder, key, value);                                                  // 431\n            }                                                                                             // 432\n                                                                                                          // 433\n                                                                                                          // 434\n// Parsing happens in four stages. In the first stage, we replace certain                                 // 435\n// Unicode characters with escape sequences. JavaScript handles many characters                           // 436\n// incorrectly, either silently deleting them, or treating them as line endings.                          // 437\n                                                                                                          // 438\n            text = String(text);                                                                          // 439\n            cx.lastIndex = 0;                                                                             // 440\n            if (cx.test(text)) {                                                                          // 441\n                text = text.replace(cx, function (a) {                                                    // 442\n                    return '\\\\u' +                                                                        // 443\n                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                // 444\n                });                                                                                       // 445\n            }                                                                                             // 446\n                                                                                                          // 447\n// In the second stage, we run the text against regular expressions that look                             // 448\n// for non-JSON patterns. We are especially concerned with '()' and 'new'                                 // 449\n// because they can cause invocation, and '=' because it can cause mutation.                              // 450\n// But just to be safe, we want to reject all unexpected forms.                                           // 451\n                                                                                                          // 452\n// We split the second stage into 4 regexp operations in order to work around                             // 453\n// crippling inefficiencies in IE's and Safari's regexp engines. First we                                 // 454\n// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we                           // 455\n// replace all simple value tokens with ']' characters. Third, we delete all                              // 456\n// open brackets that follow a colon or comma or that begin the text. Finally,                            // 457\n// we look to see that the remaining characters are only whitespace or ']' or                             // 458\n// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.                               // 459\n                                                                                                          // 460\n            if (/^[\\],:{}\\s]*$/                                                                           // 461\n                    .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')                        // 462\n                        .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']') // 463\n                        .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {                                          // 464\n                                                                                                          // 465\n// In the third stage we use the eval function to compile the text into a                                 // 466\n// JavaScript structure. The '{' operator is subject to a syntactic ambiguity                             // 467\n// in JavaScript: it can begin a block or an object literal. We wrap the text                             // 468\n// in parens to eliminate the ambiguity.                                                                  // 469\n                                                                                                          // 470\n                j = eval('(' + text + ')');                                                               // 471\n                                                                                                          // 472\n// In the optional fourth stage, we recursively walk the new structure, passing                           // 473\n// each name/value pair to a reviver function for possible transformation.                                // 474\n                                                                                                          // 475\n                return typeof reviver === 'function'                                                      // 476\n                    ? walk({'': j}, '')                                                                   // 477\n                    : j;                                                                                  // 478\n            }                                                                                             // 479\n                                                                                                          // 480\n// If the text is not JSON parseable, then a SyntaxError is thrown.                                       // 481\n                                                                                                          // 482\n            throw new SyntaxError('JSON.parse');                                                          // 483\n        };                                                                                                // 484\n    }                                                                                                     // 485\n}());                                                                                                     // 486\n                                                                                                          // 487\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}